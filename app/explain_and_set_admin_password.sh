#!/usr/bin/env bash
set -Eeuo pipefail

APP_DIR="/var/www/tatajestwazny/app"
ENV_FILE="$APP_DIR/.env"
ADMIN_AUTH_PHP="$APP_DIR/public/admin/auth.php"
LOAD_ENV_PHP="$APP_DIR/includes/load_env.php"
LOG="$APP_DIR/admin_password_report.log"

# U≈ºyj PHP z kontenera (je≈õli jest), w innym wypadku lokalnego
php_cmd() {
  if docker ps --format '{{.Names}}' | grep -q '^tjw_php$'; then
    docker exec tjw_php php "$@"
  else
    php "$@"
  fi
}

echo "üîç Raport konfiguracji has≈Ça admina (TataJestWazny)" | tee "$LOG"
echo "üìÖ $(date)" | tee -a "$LOG"
echo "----------------------------------------" | tee -a "$LOG"

echo -e "\nüìå Miejsce przechowywania has≈Ça:" | tee -a "$LOG"
if [[ -f "$ENV_FILE" ]] && grep -q '^AUTH_PASSWORD_HASH=' "$ENV_FILE"; then
  HASH_LINE=$(grep '^AUTH_PASSWORD_HASH=' "$ENV_FILE" | head -n1)
  echo "‚úÖ Znaleziono hash w $ENV_FILE:" | tee -a "$LOG"
  echo "   $HASH_LINE" | tee -a "$LOG"
else
  echo "‚ö†Ô∏è  Brak wpisu AUTH_PASSWORD_HASH w $ENV_FILE" | tee -a "$LOG"
fi

echo -e "\nüß† Miejsce u≈ºycia / weryfikacji has≈Ça:" | tee -a "$LOG"
if [[ -f "$ADMIN_AUTH_PHP" ]]; then
  echo "‚Ä¢ $ADMIN_AUTH_PHP" | tee -a "$LOG"
  grep -nE 'password_verify|AUTH_PASSWORD_HASH' "$ADMIN_AUTH_PHP" | sed 's/^/   /' | tee -a "$LOG" || true
else
  echo "‚ùå Brak pliku $ADMIN_AUTH_PHP" | tee -a "$LOG"
fi

echo -e "\nüß© Sprawdzanie wczytywania .env do \$_ENV:" | tee -a "$LOG"
if [[ -f "$LOAD_ENV_PHP" ]]; then
  echo "‚Ä¢ Parser .env: $LOAD_ENV_PHP" | tee -a "$LOG"
else
  echo "‚ùå Brak $LOAD_ENV_PHP ‚Äî bez tego \$_ENV mo≈ºe byƒá puste" | tee -a "$LOG"
fi

# Upewnij siƒô, ≈ºe load_env.php jest do≈ÇƒÖczony zanim czytamy AUTH_PASSWORD_HASH
if [[ -f "$ADMIN_AUTH_PHP" ]]; then
  if ! grep -q "includes/load_env.php" "$ADMIN_AUTH_PHP"; then
    # wstrzyknij require tu≈º po otwarciu PHP, ale tylko je≈õli jeszcze go nie ma
    sed -i '0,/<?php/s##<?php\nrequire_once __DIR__ . "\/\/..\/..\/includes\/load_env.php";#' "$ADMIN_AUTH_PHP"
    echo "üîß Dodano require_once includes/load_env.php do $ADMIN_AUTH_PHP" | tee -a "$LOG"
  else
    echo "‚úÖ $ADMIN_AUTH_PHP ju≈º ≈Çaduje includes/load_env.php" | tee -a "$LOG"
  fi
fi

# ------ USTAWIENIE / ZMIANA HAS≈ÅA ------

PASSWORD="${1:-}"   # opcjonalnie: ./explain_and_set_admin_password.sh 'NoweHaslo123!'
if [[ -z "${PASSWORD}" ]]; then
  read -rsp "üîë Podaj nowe (startowe) has≈Ço admina: " PASSWORD
  echo
fi
if [[ -z "${PASSWORD}" ]]; then
  echo "‚ùå Nie podano has≈Ça. Przerywam."
  exit 1
fi

HASH=$(php_cmd -r 'echo password_hash($argv[1], PASSWORD_DEFAULT);' "$PASSWORD")

mkdir -p "$(dirname "$ENV_FILE")"
touch "$ENV_FILE"
if grep -q '^AUTH_PASSWORD_HASH=' "$ENV_FILE"; then
  sed -i "s|^AUTH_PASSWORD_HASH=.*|AUTH_PASSWORD_HASH=\"$HASH\"|" "$ENV_FILE"
else
  printf 'AUTH_PASSWORD_HASH="%s"\n' "$HASH" >> "$ENV_FILE"
fi
echo "‚úÖ Zapisano hash do $ENV_FILE" | tee -a "$LOG"

# Szybki autotest password_verify
VERIFY=$(php_cmd -r '[$p,$h]=[$argv[1],$argv[2]]; echo password_verify($p,$h) ? "OK" : "FAIL";' "$PASSWORD" "$HASH")
echo "üß™ Test password_verify (na ≈õwie≈ºym hashu): $VERIFY" | tee -a "$LOG"

cat <<TXT | tee -a "$LOG"

‚ÑπÔ∏è Podsumowanie:
- Has≈Ço admina jest trzymane jako bcrypt w: $ENV_FILE, klucz: AUTH_PASSWORD_HASH
- Podczas logowania u≈ºywany jest: $ADMIN_AUTH_PHP (password_verify na AUTH_PASSWORD_HASH)
- .env musi byƒá wczytany przez: $LOAD_ENV_PHP (dopiƒÖ≈Çem, je≈õli brakowa≈Ço)

‚ñ∂Ô∏è Co dalej:
1) Wejd≈∫ na: https://app.tatajestwazny.pl/admin/auth.php
2) Zaloguj siƒô has≈Çem ustawionym przed chwilƒÖ.

(Je≈õli przeglƒÖdarka trzyma≈Ça stare sesje/cookies ‚Äî od≈õwie≈º twardo lub wyczy≈õƒá cookies dla domeny.)
TXT

echo "üìÑ Pe≈Çny raport: $LOG"
